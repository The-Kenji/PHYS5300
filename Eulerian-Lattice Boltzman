import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from IPython.display import HTML, display
import ipywidgets as widgets

# ---------------------
# LBM Simulation Code
# ---------------------
def main(angle=-30):
    """
    Lattice Boltzmann Simulation of 2D incompressible flow past an angled flat plate.
    In addition to the usual simulation (left subplot showing vorticity), a second subplot
    shows the time series of the average pressure difference on the bottom of the plate
    minus the top (we use this to examine the lift generated).
    
    The plate is now placed at a user-specified angle (in degrees), converted internally to radians.
    """
    # ---------------------
    # Simulation parameters
    # ---------------------
    Nx = 400            # resolution in x-direction
    Ny = 100            # resolution in y-direction
    rho0 = 100          # average density
    tau = 0.6           # collision timescale
    Nt = 1000           # total number of simulation timesteps
    plotEvery = 10      # update the animation every 10 timesteps
    frames = Nt // plotEvery  # number of animation frames

    # ---------------------
    # Lattice speeds and weights (D2Q9)
    # ---------------------
    NL = 9
    idxs = np.arange(NL)
    cxs = np.array([0,  0,  1,  1,  1,  0, -1, -1, -1])
    cys = np.array([0,  1,  1,  0, -1, -1, -1,  0,  1])
    weights = np.array([4/9, 1/9, 1/36, 1/9, 1/36, 1/9, 1/36, 1/9, 1/36])
    
    # ---------------------
    # Initial Conditions
    # ---------------------
    F = np.ones((Ny, Nx, NL))
    np.random.seed(42)
    F += 0.01 * np.random.randn(Ny, Nx, NL)
    # A slight spatial modulation for one population:
    X, Y = np.meshgrid(np.arange(Nx), np.arange(Ny))
    F[:, :, 3] += 2 * (1 + 0.2 * np.cos(2 * np.pi * X / Nx * 4))
    rho = np.sum(F, axis=2)
    for i in idxs:
        F[:, :, i] *= rho0 / rho
    
    # ---------------------
    # Define an angled flat plate (obstacle)
    # ---------------------
    # Set the plate angle (in radians) according to the user input.
    theta = -np.deg2rad(angle)
    plate_center_x = Nx / 4       # center x-coordinate
    plate_center_y = Ny / 2       # center y-coordinate
    plate_length = 100            # plate length (pixels)
    plate_thickness = 3           # plate thickness (pixels)
    
    # Create coordinate mesh for obstacle definition.
    Xgrid, Ygrid = np.meshgrid(np.arange(Nx), np.arange(Ny))
    X_rel = Xgrid - plate_center_x
    Y_rel = Ygrid - plate_center_y
    # p: coordinate projected along the plate’s direction, d: along its normal.
    p = X_rel * np.cos(theta) + Y_rel * np.sin(theta)
    d = -X_rel * np.sin(theta) + Y_rel * np.cos(theta)
    plate = (np.abs(d) < (plate_thickness / 2)) & (np.abs(p) < (plate_length / 2))
    # Divide the plate region: define "bottom" as points with p < 0 and "top" with p >= 0.
    bottom_mask = plate & (p < 0)
    top_mask = plate & (p >= 0)
    
    # ---------------------
    # Data storage for pressure difference
    # ---------------------
    pressure_diff_history = []
    time_history = []
    frame_count = 0
    
    # ---------------------
    # Prepare a figure with two subplots:
    #   ax_sim: Simulation display (vorticity field with obstacle)
    #   ax_press: Plot of ΔPressure (bottom - top) versus time.
    # ---------------------
    fig, (ax_sim, ax_press) = plt.subplots(1, 2, figsize=(10, 4), dpi=80)
    
    # For the simulation display we will update the image each frame.
    im_initial = np.zeros((Ny, Nx))
    im_obj = ax_sim.imshow(im_initial, cmap='gist_rainbow', clim=[-0.1, 0.1])
    ax_sim.imshow(~plate, cmap='gray', alpha=0.3)
    ax_sim.invert_yaxis()
    ax_sim.get_xaxis().set_visible(False)
    ax_sim.get_yaxis().set_visible(False)
    ax_sim.set_aspect('equal')
    ax_sim.set_title("LBM Flow Simulation")
    
    # For the pressure plot, we initialize a line object.
    press_line, = ax_press.plot([], [], 'b-', lw=2)
    ax_press.set_xlim(0, frames)
    ax_press.set_ylim(-5, 5)  # Adjust based on what pressure differences you expect.
    ax_press.set_xlabel("Frame")
    ax_press.set_ylabel("ΔPressure (Bottom - Top)")
    ax_press.set_title("Pressure Difference vs Time")

    # ---------------------
    # Function to advance the simulation by 'nsteps' timesteps
    # ---------------------
    def step_simulation(nsteps):
        nonlocal F
        for _ in range(nsteps):
            # --- Drift (streaming) step ---
            for i, cx, cy in zip(idxs, cxs, cys):
                F[:, :, i] = np.roll(F[:, :, i], cx, axis=1)
                F[:, :, i] = np.roll(F[:, :, i], cy, axis=0)
            # --- Bounce-back using the plate ---
            bndryF = F[plate, :].copy()
            bndryF = bndryF[:, [0, 5, 6, 7, 8, 1, 2, 3, 4]]
            # --- Collision step ---
            rho = np.sum(F, axis=2)
            ux = np.sum(F * cxs, axis=2) / rho
            uy = np.sum(F * cys, axis=2) / rho
            Feq = np.zeros(F.shape)
            for i, cx, cy, w in zip(idxs, cxs, cys, weights):
                cu = cx * ux + cy * uy
                Feq[:, :, i] = rho * w * (1 + 3*cu + 9*(cu**2)/2 - 3*(ux**2 + uy**2)/2)
            F += -(1.0 / tau) * (F - Feq)
            # Enforce bounce-back at the plate
            F[plate, :] = bndryF
        return ux, uy, rho

    # ---------------------
    # Update function for the animation
    # ---------------------
    def update(frame):
        nonlocal frame_count
        ux, uy, rho = step_simulation(plotEvery)
        # Compute a finite-difference vorticity for visualization.
        vorticity = (np.roll(ux, -1, axis=0) - np.roll(ux, 1, axis=0)) - \
                    (np.roll(uy, -1, axis=1) - np.roll(uy, 1, axis=1))
        # Mask the plate region (set vorticity to NaN so it appears distinct).
        vorticity[plate] = np.nan

        # Update simulation subplot.
        ax_sim.clear()
        im = ax_sim.imshow(np.ma.array(vorticity, mask=plate), cmap='gist_rainbow', clim=[-0.1, 0.1])
        ax_sim.imshow(~plate, cmap='gray', alpha=0.3)
        ax_sim.invert_yaxis()
        ax_sim.get_xaxis().set_visible(False)
        ax_sim.get_yaxis().set_visible(False)
        ax_sim.set_aspect('equal')
        ax_sim.set_title(f"Time step: {frame * plotEvery}")

        # Compute average pressure on bottom and top of the plate (approximate the lift force).
        bottom_pressure = np.nanmean(rho[bottom_mask]) if np.any(bottom_mask) else np.nan
        top_pressure = np.nanmean(rho[top_mask]) if np.any(top_mask) else np.nan
        delta_pressure = bottom_pressure - top_pressure
        pressure_diff_history.append(delta_pressure)
        time_history.append(frame_count)
        frame_count += 1

        # Update pressure difference subplot.
        ax_press.clear()
        ax_press.plot(time_history, pressure_diff_history, 'b-', lw=2)
        ax_press.set_xlim(0, frames)
        if pressure_diff_history:
            ymin = min(pressure_diff_history) - 0.5
            ymax = max(pressure_diff_history) + 0.5
            ax_press.set_ylim(ymin, ymax)
        ax_press.set_xlabel("Frame")
        ax_press.set_ylabel("ΔPressure (Bottom - Top)")
        ax_press.set_title("Lift Force on the Plate vs Time")
        return im,

    ani = FuncAnimation(fig, update, frames=frames, interval=50, blit=False)
    plt.close(fig)
    return ani

# ---------------------
# Widget Code: Slider and Button to Run Simulation
# ---------------------
def run_simulation_widget(angle):
    ani = main(angle)
    return HTML(ani.to_jshtml())

# Create a slider for the plate angle (in degrees)
angle_slider = widgets.FloatSlider(
    value=-30.0, 
    min=-90.0, 
    max=90.0, 
    step=1.0,
    description='Plate Angle (°):',
    continuous_update=True
)

# Create a button widget for running the simulation.
run_button = widgets.Button(
    description='Run Simulation',
    button_style='success'
)

# Output widget to display the animation.
display_output = widgets.Output()

# Define the callback when the button is clicked.
def on_run_button_clicked(b):
    display_output.clear_output(wait=True)
    with display_output:
        html_anim = run_simulation_widget(angle_slider.value)
        display(html_anim)

run_button.on_click(on_run_button_clicked)

# Arrange the slider and button horizontally.
ui = widgets.HBox([angle_slider, run_button])
display(ui, display_output)
